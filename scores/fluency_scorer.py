import openai
import re
from typing import List, Dict
import json

class conversationFluency():
    def __init__(self):
        self.prompt = """
    ржирж┐ржЪрзЗ ржПржХржЯрж┐ ржмрзНржпржХрзНрждрж┐рж░ рж╕рж╛ржерзЗ ржПржЬрзЗржирзНржЯрзЗрж░ ржмрж╛ржВрж▓рж╛ ржХржерзЛржкржХржержи ржжрзЗржУрзЯрж╛ рж╣рзЯрзЗржЫрзЗред

    рждрзБржорж┐ ржПржХржЬржи ржнрж╛рж╖рж╛ ржмрж┐рж╢рзНрж▓рзЗрж╖ржХ рж╣рж┐рж╕рзЗржмрзЗ ржХрж╛ржЬ ржХрж░ржЫрзЛред ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржХрж░рзЛ ржкрзБрж░рзЛ ржХржерзЛржкржХржержиржЯрж┐ ржХрждржЯрж╛ ржкрзНрж░рж╛ржХрзГрждрж┐ржХ, рж╕рж╛ржмрж▓рзАрж▓, ржзрж╛рж░рж╛ржмрж╛рж╣рж┐ржХ ржПржмржВ ржорж╛ржиржмрж╕рзБрж▓ржн ржЫрж┐рж▓ред

    рзж ржерзЗржХрзЗ рзл ржПрж░ ржоржзрзНржпрзЗ ржПржХржЯрж┐ ржлрзНрж▓рзБржпрж╝рзЗржирзНрж╕рж┐ рж╕рзНржХрзЛрж░ ржжрж╛ржУ ржПржмржВ рж╕ржВржХрзНрж╖рж┐ржкрзНржд ржмрзНржпрж╛ржЦрзНржпрж╛ рж▓рзЗржЦрзЛ:

    рж╕рзНржХрзЛрж░рзЗрж░ ржорж╛ржирзЗ:
    рзж: ржЕржкрзНрж░рж╛рж╕ржЩрзНржЧрж┐ржХ, ржЕржкрзНрж░рж╛ржХрзГрждрж┐ржХ, ржЕрж╕рзНржкрж╖рзНржЯ ржХржерзЛржкржХржержиред
    рзз: ржЕржирзЗржХ рж╕ржорж╕рзНржпрж╛ ржЖржЫрзЗ, ржЙрждрзНрждрж░рзЗрж░ ржзрж╛рж░рж╛ржмрж╛рж╣рж┐ржХрждрж╛ ржирзЗржЗред
    рзи: ржХрж┐ржЫрзБржЯрж╛ ржпрзБржХрзНрждрж┐ржпрзБржХрзНржд, ржХрж┐ржирзНрждрзБ ржХрзГрждрзНрж░рж┐ржо ржмрж╛ ржПрж▓рзЛржорзЗрж▓рзЛред
    рзй: ржорзЛржЯрж╛ржорзБржЯрж┐ ржарж┐ржХ ржЖржЫрзЗ, ржХрж┐ржЫрзБ ржЕрж╕ржВржЧрждрж┐ ржЖржЫрзЗред
    рзк: рж╕рж╛ржмрж▓рзАрж▓ ржУ ржорж╛ржиржмрж╕рзБрж▓ржн, ржЫрзЛржЯржЦрж╛ржЯрзЛ рждрзНрж░рзБржЯрж┐ред
    рзл: ржЦрзБржмржЗ ржкрзНрж░рж╛ржХрзГрждрж┐ржХ ржУ ржорж╕рзГржг ржХржерзЛржкржХржержиред

    **ржлрж▓рж╛ржлрж▓ ржЕржмрж╢рзНржпржЗ ржирж┐ржЪрзЗрж░ ржлрж░ржорзНржпрж╛ржЯрзЗ JSON рж╣рж┐рж╕рзЗржмрзЗ ржжрж╛ржУ:**
    ```json
    {{
      "fluency_score": <0-5>,
      "explanation": "<рзз-рзи рж▓рж╛ржЗржирзЗ ржХрж╛рж░ржг>"
    }}
    ```

    ржХржерзЛржкржХржержи:
    {}
"""     
        self.model = "gpt-3.5-turbo"
        self.temperature = 0 


    def format_dialogue(self,dialogue: List[Dict[str, str]]) -> str:
        formatted = ""
        for turn in dialogue:
            formatted += f"ржмрзНржпржХрзНрждрж┐: {turn['user']}\nржПржЬрзЗржирзНржЯ: {turn['agent']}\n"
        return formatted.strip()

    def score_multi_turn_conversation(self,dialogue: List[Dict[str, str]]) -> Dict[str, object]:
        dialogue_str = self.format_dialogue(dialogue)
        prompt_filled = self.prompt.format(dialogue_str)


        try:
            response = openai.ChatCompletion.create(
                model=self.model,
                messages=[{"role": "user","content": prompt_filled.strip()}],
                temperature=self.temperature
            )

            content = response['choices'][0]['message']['content']
            print(content)
            
            json_str_match = re.search(r'\{[\s\S]*?\}', content)
            if json_str_match:
                parsed = json.loads(json_str_match.group())
                score = parsed.get("fluency_score", -1)
                reason = parsed.get("explanation", "No explanation provided.")
            else:
                score = -1
                reason = "Could not extract JSON from response."

            return {
                "score": score,
                "reason": reason,
                "raw_response": content
            }

        except Exception as e:
            return {
                "score": -1,
                "reason": f"Error: {str(e)}",
                "raw_response": None
            }
        
    def load_data(self,data_path):
        with open(data_path, "r", encoding="utf-8") as f:
            dataset = json.load(f)
        return dataset
    
    def evaluate_all(self, data_path):
        dataset = self.load_data(data_path=data_path)
        results = []

        for item in dataset:
            dialogue = item["dialogue"]
            expected = item["expected_fluency_score"]

            result = self.score_multi_turn_conversation(dialogue)
            print("Evaluating multi-turn conversation...")
            for turn in dialogue:
                print(f"ЁЯСд {turn['user']}")
                print(f"ЁЯдЦ {turn['agent']}")
            print(f"тЬЕ Predicted Score: {result['score']}, ЁЯОп Expected: {expected}")
            print(f"ЁЯУМ Explanation: {result['reason']}\n{'-'*60}")

            results.append({
                "dialogue": dialogue,
                "expected_score": expected,
                "predicted_score": result["score"],
                "reason": result["reason"],
                "raw_response": result["raw_response"]
            })

        with open("output/multi_turn_fluency_results.json", "w", encoding="utf-8") as f:
            json.dump(results, f, ensure_ascii=False, indent=2)


